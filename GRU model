
%% Clear computing environment
clear all
clc

%% Import landslide sampling data
% Daily sampling data
data = xlsread('H:\Thesis\Forecast result\Daily monitoring frequency.xlsx','D2:K821')；
input = data(:,2:8)';
output = data(:,1)'; 
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.768 % Proportion of training sets

% Weekly sampling data
data = xlsread('H:\Thesis\Forecast result\Weekly monitoring frequency.xlsx','D2:M118')；
input = data(:,2:10)'; 
output = data(:,1)';
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.7680  % Proportion of training sets

% Nine days of sampling data
data = xlsread('H:\Thesis\Forecast result\Nine days of monitoring frequency.xlsx','D2:K92')；
input = data(:,2:8)';
output = data(:,1)';
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.769  % Proportion of training sets

% Eleven days of sampling data
data = xlsread('H:\Thesis\Forecast result\Eleven days of monitoring frequency.xlsx','D2:K75')；
input = data(:,2:8)'; 
output = data(:,1)';  
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.769  % Proportion of training sets

% Thirteen days of sampling data
data = xlsread('H:\Thesis\Forecast result\Thirteen days of monitoring frequency.xlsx','D2:K64')；
input = data(:,2:8)'; 
output = data(:,1)';
nwhole = size(input,2);
temp = randperm(nwhole); 
train_ratio = 0.762  % Proportion of training sets

% Fifteen days of sampling data
data = xlsread('H:\Thesis\Forecast result\Fifteen days of monitoring frequency.xlsx','D2:K55')；
input = data(:,2:8)'; 
output = data(:,1)';
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.78  % Proportion of training sets

% Twentyone days of sampling data
% data = xlsread('H:\Thesis\Forecast result\Twentyone days of monitoring frequency.xlsx','D2:K40')；
input = data(:,2:8)';
output = data(:,1)';
nwhole = size(input,2);
temp = randperm(nwhole);
train_ratio = 0.769  % Proportion of training sets

% Monthly sampling data
data = xlsread('H:\Thesis\Forecast result\Monthly monitoring frequency.xlsx','D2:K28')；
input = data(:,2:8)';
output = data(:,1)';
nwhole = size(input,2);
train_ratio = 0.7780  % Proportion of training sets

%% Divide the training set and test set
% 1、Determine the amount of data that the training set and test set need to import
ntrain = round(nwhole*train_ratio);
ntest = nwhole-ntrain;
% 2、Import the input and output items of the training set
input_train = input(:,1:ntrain);
output_train = output(:,1:ntrain);
% 3、Import the input and output items of the test set
input_test = input(:, ntrain+1:ntrain+ntest);
output_test = output(:,ntrain+1:ntrain+ntest);

%% Preliminary processing of data
% 1、Normalization of training set data
[inputn_train,inputps] = mapminmax(input_train);
[outputn_train,outputps] = mapminmax(output_train);
% 2、Normalization of testing set data
inputn_test = mapminmax('apply',input_test,inputps);
outputn_test = mapminmax('apply',output_test,outputps);
% 3、Determine the amount of data for the training set and the test set
N1 = size(output_train,2);
N = size(output_test,2);

%% Determination of basic parameters of GRU model
% 1、Dimensions of the input data
inputSize  = size(inputn_train,1);  
 % 2、Dimensions of the output data
outputSize = size(outputn_train,1);   
% 3、Sets the number of hidden units
numhidden_units = 25;  
% 4、Set random seeds
rng('default')；

%% Create the GRU model
layers = [ ...
    sequenceInputLayer(inputSize,'name','input')               
    gruLayer(numhidden_units,'Outputmode','sequence','name','hidden1') 
    dropoutLayer(0.2,'name','dropout')
    fullyConnectedLayer(outputSize,'name','fullconnect')        
    regressionLayer('name','out')];

opts = trainingOptions('adam', ...
    'MaxEpochs',500, ... 
    'miniBatchSize',1, ...
    'GradientThreshold',1,...
    'ExecutionEnvironment','cpu',... 
    'InitialLearnRate',0.05, ...  
    'LearnRateSchedule','piecewise', ...
    'LearnRateDropPeriod',100, ...  
    'ValidationFrequency',1, ...  
    'LearnRateDropFactor',0.002, ...
    'Verbose',0, ...
    'Plots','training-progress');
tic  

%% The GRU model training and forecasting
% 1、Training
GRUnet = trainNetwork(inputn_train ,outputn_train ,layers,opts);
GRUnet = resetState(GRUnet)
toc;
[GRUnet,GRUoutputr_train]= predictAndUpdateState(GRUnet,inputn_train);
% 2、The GRU model forecasting
[GRUnet,GRUoutputr_test] = predictAndUpdateState(GRUnet,inputn_test);

%% Inverse normalization of the output data
% 1、Inverse normalization of training data
GRUoutput_train = mapminmax('reverse',GRUoutputr_train,outputps);
%2、Inverse normalization of testing data
GRUoutput_test = mapminmax('reverse',GRUoutputr_test,outputps); 

%% Model evaluation
% Evaluation of model training results
error_train = GRUoutput_train-output_train; 
error_train_a = abs(error_train)
R1=1-N1*sum((error_train).^2)/(N1*sum((output_train').^2)-sum((GRUoutput_train').^2))
MAE1= (sum(error_train_a))./N1
RMSE1=sqrt(sum((error_train).^2)/N1)
% Evaluation of model testing results
error_test = GRUoutput_test-output_test; 
error_test_a = abs(error_test)
R2=1-N*sum((error_test).^2)/(N*sum((output_test').^2)-sum((GRUoutput_test').^2))
MAE2=(sum(error_test_a))./N
RMSE2=sqrt(sum((error_test).^2)/N)
% Error analysis
pererror_test = error_test./output_test';

%% Drawing graphs
% 1、Plot the training set results
figure()
plot(GRUoutput_train,'b--','linewidth',2.0) 
hold on
plot(output_train,'r:.','linewidth',2.0)       
legend( 'Training value','Actual value','Location','NorthEast','FontName','Times New Roman','fontsize',11);
xlabel('Sampling frequency','fontsize',12,'FontName','Times New Roman');
ylabel('Displacement/mm','fontsize',12,'FontName','Times New Roman');
string = {'GRU model training results';['R^2=' num2str(R1)];['RMSE=' num2str(RMSE1)];['MAPE=' num2str(MAE1)]};
title(string)

% 2、Plot the training set results
figure()
plot(GRUoutput_test,'b--','linewidth',2.0)    
hold on
plot(output_test,'r:.','linewidth',2.0) 
legend( 'Testing value','Actual value','Location','NorthEast','FontName','Times New Roman','fontsize',11);
xlabel('Sampling frequency','fontsize',12,'FontName','Times New Roman');
ylabel('Displacement/mm','fontsize',12,'FontName','Times New Roman');
string = {'GRU model testing results';['R^2=' num2str(R2)];['RMSE=' num2str(RMSE2)];['MAPE=' num2str(MAE2)]};
title(string)
%------------------------------------------------------------------------------------
